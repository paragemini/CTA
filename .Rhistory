}
return_routes_time <- function( master_f){
days <- c("monday","tuesday","wednesday","thursday",
"friday","saturday","sunday")
days_split <- lapply(days, function(x){
day_one <-   master_f[master_f[[x]] == 1,]
day_one <- return_tod(day_one = day_one, type_of_day = x)
return(day_one)
})
names(days_split) <- days
i <- 0
expt_2 <- lapply(days_split, function(x){
i <<- i + 1
return(
x[ , .(Min_Stop_Sequence = min(stop_sequence),
Max_Stop_Sequence = max(stop_sequence),
Min_Arrival_Time = min(start_time),
Max_Departure_Time = max(end_time),
trips = length(unique(trip_id)),
trp_ids = trip_id[which.max(stop_sequence)],
max_shape_id = shape_id[which.max(stop_sequence)],
max_shape_distance = shape_dist_traveled[which.max(stop_sequence)],
Day = days[i]
),
by = list(route_id, direction, TOD)][ ,
`:=`(Min_Arrival_Time = str_pad(Min_Arrival_Time,6,side = "left",pad = "0"),
Max_Departure_Time = str_pad(Max_Departure_Time,6,side = "left",pad = "0")),]
)
})
return(expt_2)
}
#calculating time range per route
master_f <- master_file[ end_date != 20220611  , , ][ , `:=`(
start_time = as.numeric(gsub(arrival_time,pattern = ":",replacement = "")),
end_time =  as.numeric(gsub(departure_time,pattern = ":",replacement = "")),
start_local_hour = as.numeric(str_sub( arrival_time,1,2))
)]
routes_time <-  return_routes_time(master_f = master_f)
routes_daily_stats <- setDT(do.call(rbind.data.frame, routes_time))
routes_daily_stats[ , Day_Type := if_else(Day != "saturday" & Day != "sunday" , "Wkdy","Wknd"), ]
shapes_routes <- setDT(list(unique(routes_daily_stats$max_shape_id)))
routes_daily_stats_shapes <-st_as_sf(left_join(shapes_routes, trip_shapes,
by = c("V1"= "shape_id")),
crs = 4326, sf_column_name = "geometry")
stops_trips <- setDT(list(unique(stop_times$stop_id[(stop_times$trip_id %in% routes_daily_stats$trp_ids)])))
stops_trips <- left_join(stops_trips,
stops[ , c(1,3,5,6)],
by =c("V1" = "stop_id"))
View(routes_daily_stats)
sum(routes_daily_stats)
sum(routes_daily_stats$trips)
frequency <- routes_daily_stats[, .(total_trips = sum(trips)) ,
by = list( TOD, Day_Type, route_id ) ]
View(frequency)
frequency <- routes_daily_stats[, .(total_trips = sum(trips),
Min_Arrival_Time = Min_Arrival_Time,
Max_Departure_Time = Max_Departure_Time) ,
by = list( TOD, Day_Type, route_id ) ]
View(frequency)
frequency <- routes_daily_stats[, .(total_trips = sum(trips),
Min_Arrival_Time = Min_Arrival_Time,
Max_Departure_Time = Max_Departure_Time) ,
by = list( TOD, Day_Type, route_id,Day ) ]
View(frequency)
library(sf)
library(data.table)
library(lehdr)
library(tidycensus)
library(stringr)
library(dplyr)
library(leaflet)
library(tidyr)
library(htmltools)
library(leaflet)
library(rvest)
library(lubridate)
library(purrr)
library(leafgl)
library(tigris)
library(deckgl)
#library(rdeck)
library(sfheaders)
files_paths <- list.files("C:\\Users\\pgupta\\CTA\\google_transit", full.names = T)
files_names <- list.files("C:\\Users\\pgupta\\CTA\\google_transit")
files <- lapply(files_paths, fread)
names(files) <- gsub(pattern = "\\.txt$", replacement = "", x = files_names)
cta_data <- files
# assigning all the value to the variables
routes <- cta_data[["routes"]]
trips <- cta_data[["trips"]]
calendar <- cta_data[["calendar"]]
stops <- cta_data[["stops"]]
stop_times <- cta_data[["stop_times"]]
shapes <- cta_data[["shapes"]]
#getting one master file
master_file <- left_join(
left_join(
left_join(stop_times,
trips[ , c(1,2,3,6,7)],
by = "trip_id"), stops[,c(1,3,5,6)],
by = "stop_id"), calendar[,c(1:10)], by = "service_id")
#functions
return_tod <- function(day_one, type_of_day){
if(type_of_day != "saturday" & type_of_day != "sunday"){
day_tod <- day_one %>%
mutate(TOD = if_else(start_local_hour >= 4 &
start_local_hour < 6, "Early AM",
if_else(start_local_hour >= 6 &
start_local_hour < 9, "AM-Peak",
if_else(start_local_hour >= 9 &
start_local_hour < 15, "Midday",
if_else(start_local_hour >= 15 &
start_local_hour < 19, "PM-Peak",
if_else(start_local_hour >= 19 &
start_local_hour < 23, "Evening", "Late-Night"
)
} else if(type_of_day == "saturday"){
day_tod <- day_one %>%
mutate(TOD = if_else(start_local_hour >= 4 &
start_local_hour < 8, "SAT-AM",
if_else(start_local_hour >= 8 &
start_local_hour < 20, "SAT-MD",
if_else(start_local_hour >= 20 , "SAT-PM", "SAT-Late-Night"
)
} else if(type_of_day == "sunday"){
day_tod <- day_one %>%
mutate(TOD = if_else(start_local_hour >= 0 &
start_local_hour < 5, "SUN-EA",
if_else(start_local_hour >= 5 &
start_local_hour < 9, "SUN-AM",
if_else(start_local_hour >= 9 &
start_local_hour < 18, "SUN-MD", "SUN-PM"
)
}
return(day_tod)
}
return_routes_time <- function( master_f){
days <- c("monday","tuesday","wednesday","thursday",
"friday","saturday","sunday")
days_split <- lapply(days, function(x){
day_one <-   master_f[master_f[[x]] == 1,]
day_one <- return_tod(day_one = day_one, type_of_day = x)
return(day_one)
})
names(days_split) <- days
i <- 0
expt_2 <- lapply(days_split, function(x){
i <<- i + 1
return(
x[ , .(Min_Stop_Sequence = min(stop_sequence),
Max_Stop_Sequence = max(stop_sequence),
Min_Arrival_Time = min(start_time),
Max_Departure_Time = max(end_time),
trips = length(unique(trip_id)),
trp_ids = trip_id[which.max(stop_sequence)],
max_shape_id = shape_id[which.max(stop_sequence)],
max_shape_distance = shape_dist_traveled[which.max(stop_sequence)],
Day = days[i]
),
by = list(route_id, direction, TOD)][ ,
`:=`(Min_Arrival_Time = str_pad(Min_Arrival_Time,6,side = "left",pad = "0"),
Max_Departure_Time = str_pad(Max_Departure_Time,6,side = "left",pad = "0")),]
)
})
return(expt_2)
}
#calculating time range per route
master_f <- master_file[ end_date != 20220611  , , ][ , `:=`(
start_time = as.numeric(gsub(arrival_time,pattern = ":",replacement = "")),
end_time =  as.numeric(gsub(departure_time,pattern = ":",replacement = "")),
start_local_hour = as.numeric(str_sub( arrival_time,1,2))
)]
routes_time <-  return_routes_time(master_f = master_f)
routes_daily_stats <- setDT(do.call(rbind.data.frame, routes_time))
routes_daily_stats[ , Day_Type := if_else(Day != "saturday" &
Day != "sunday" , "Wkdy","Wknd"), ]
frequency <- routes_daily_stats[, .(total_trips = sum(trips),
Min_Arrival_Time = Min_Arrival_Time,
Max_Departure_Time = Max_Departure_Time) ,
by = list( TOD, Day_Type, route_id,Day ) ]
library(sf)
library(data.table)
library(lehdr)
library(tidycensus)
library(stringr)
library(dplyr)
library(leaflet)
library(tidyr)
library(htmltools)
library(leaflet)
library(rvest)
library(lubridate)
library(purrr)
library(leafgl)
library(tigris)
library(deckgl)
#library(rdeck)
library(sfheaders)
files_paths <- list.files("C:\\Users\\pgupta\\CTA\\google_transit", full.names = T)
files_names <- list.files("C:\\Users\\pgupta\\CTA\\google_transit")
files <- lapply(files_paths, fread)
names(files) <- gsub(pattern = "\\.txt$", replacement = "", x = files_names)
cta_data <- files
# assigning all the value to the variables
routes <- cta_data[["routes"]]
trips <- cta_data[["trips"]]
calendar <- cta_data[["calendar"]]
stops <- cta_data[["stops"]]
stop_times <- cta_data[["stop_times"]]
shapes <- cta_data[["shapes"]]
#getting one master file
master_file <- left_join(
left_join(
left_join(stop_times,
trips[ , c(1,2,3,6,7)],
by = "trip_id"), stops[,c(1,3,5,6)],
by = "stop_id"), calendar[,c(1:10)], by = "service_id")
#functions
return_tod <- function(day_one, type_of_day){
if(type_of_day != "saturday" & type_of_day != "sunday"){
day_tod <- day_one %>%
mutate(TOD = if_else(start_local_hour >= 4 &
start_local_hour < 6, "Early AM",
if_else(start_local_hour >= 6 &
start_local_hour < 9, "AM-Peak",
if_else(start_local_hour >= 9 &
start_local_hour < 15, "Midday",
if_else(start_local_hour >= 15 &
start_local_hour < 19, "PM-Peak",
if_else(start_local_hour >= 19 &
start_local_hour < 23, "Evening", "Late-Night"
)
} else if(type_of_day == "saturday"){
day_tod <- day_one %>%
mutate(TOD = if_else(start_local_hour >= 4 &
start_local_hour < 8, "SAT-AM",
if_else(start_local_hour >= 8 &
start_local_hour < 20, "SAT-MD",
if_else(start_local_hour >= 20 , "SAT-PM", "SAT-Late-Night"
)
} else if(type_of_day == "sunday"){
day_tod <- day_one %>%
mutate(TOD = if_else(start_local_hour >= 0 &
start_local_hour < 5, "SUN-EA",
if_else(start_local_hour >= 5 &
start_local_hour < 9, "SUN-AM",
if_else(start_local_hour >= 9 &
start_local_hour < 18, "SUN-MD", "SUN-PM"
)
}
return(day_tod)
}
return_routes_time <- function( master_f){
days <- c("monday","tuesday","wednesday","thursday",
"friday","saturday","sunday")
days_split <- lapply(days, function(x){
day_one <-   master_f[master_f[[x]] == 1,]
day_one <- return_tod(day_one = day_one, type_of_day = x)
return(day_one)
})
names(days_split) <- days
i <- 0
expt_2 <- lapply(days_split, function(x){
i <<- i + 1
return(
x[ , .(Min_Stop_Sequence = min(stop_sequence),
Max_Stop_Sequence = max(stop_sequence),
Min_Arrival_Time = min(start_time),
Max_Departure_Time = max(end_time),
trips = length(unique(trip_id)),
trp_ids = trip_id[which.max(stop_sequence)],
max_shape_id = shape_id[which.max(stop_sequence)],
max_shape_distance = shape_dist_traveled[which.max(stop_sequence)],
Day = days[i]
),
by = list(route_id, direction, TOD)][ ,
`:=`(Min_Arrival_Time = str_pad(Min_Arrival_Time,6,side = "left",pad = "0"),
Max_Departure_Time = str_pad(Max_Departure_Time,6,side = "left",pad = "0")),]
)
})
return(expt_2)
}
#calculating time range per route
master_f <- master_file[ end_date != 20220611  , , ][ , `:=`(
start_time = as.numeric(gsub(arrival_time,pattern = ":",replacement = "")),
end_time =  as.numeric(gsub(departure_time,pattern = ":",replacement = "")),
start_local_hour = as.numeric(str_sub( arrival_time,1,2))
)]
routes_time <-  return_routes_time(master_f = master_f)
routes_daily_stats <- setDT(do.call(rbind.data.frame, routes_time))
routes_daily_stats[ , Day_Type := if_else(Day != "saturday" &
Day != "sunday" , "Wkdy","Wknd"), ]
frequency <- routes_daily_stats[, .(total_trips = sum(trips),
Min_Arrival_Time = Min_Arrival_Time,
Max_Departure_Time = Max_Departure_Time) ,
by = list( TOD, Day_Type, route_id,Day ) ]
frequency <- routes_daily_stats[, .(total_trips = sum(trips),
Min_Arrival_Time = Min_Arrival_Time,
Max_Departure_Time = Max_Departure_Time) ,
by = list( TOD, Day_Type, route_id ) ]
frequency <- routes_daily_stats[, .(total_trips = sum(trips),
Min_Arrival_Time = Min_Arrival_Time,
Max_Departure_Time = Max_Departure_Time) ,
by = list( TOD, Day,Day_Type, route_id ) ]
View(frequency)
shapes_routes <- setDT(list(unique(routes_daily_stats$max_shape_id)))
routes_daily_stats_shapes <-st_as_sf(left_join(shapes_routes, trip_shapes,
by = c("V1"= "shape_id")),
crs = 4326, sf_column_name = "geometry")
stops_trips <- setDT(list(unique(stop_times$stop_id[(stop_times$trip_id %in% routes_daily_stats$trp_ids)])))
stops_trips <- left_join(stops_trips,
stops[ , c(1,3,5,6)],
by =c("V1" = "stop_id"))
leaflet() %>% addTiles() %>%
addPolylines(data = routes_daily_stats_shapes, weight = 1) %>%
addCircleMarkers(data = stops_trips,
lat = stops_trips$stop_lat, lng = stops_trips$stop_lon,
radius = 2)
leaflet() %>% addTiles() %>%
addPolylines(data = routes_daily_stats_shapes, weight = 2) %>%
addCircleMarkers(data = stops_trips,
lat = stops_trips$stop_lat, lng = stops_trips$stop_lon,
radius = 1, weight = 1)
leaflet() %>% addTiles() %>%
addPolylines(data = routes_daily_stats_shapes, weight = 2, opacity = 0.5) %>%
addCircleMarkers(data = stops_trips,
lat = stops_trips$stop_lat, lng = stops_trips$stop_lon,
radius = 2, weight = 1)
leaflet() %>% addTiles() %>%
addPolylines(data = routes_daily_stats_shapes, weight = 2, opacity = 0.5) %>%
addCircleMarkers(data = stops_trips,
lat = stops_trips$stop_lat, lng = stops_trips$stop_lon,
radius = 4, weight = 1)
leaflet() %>% addProviderTiles(providers[[113]]) %>%
addPolylines(data = routes_daily_stats_shapes, weight = 2, opacity = 0.5,
color = "yellow") %>%
addCircleMarkers(data = stops_trips,
lat = stops_trips$stop_lat, lng = stops_trips$stop_lon,
radius = 4, weight = 1, color = "white")
usethis::edit_r_environ()
load("C:/Shiny-App/shiny/App2.Rdata")
rsconnect::setAccountInfo(name='prgpt2', token='006A2B6D672018962D51E710D0797444', secret='ezFuDKOncG4xofkiCyYo0URubLfnA6XLbSOD0vKr')
usethis::edit_r_environ()
load("C:/Shiny-App/shiny/App2.Rdata")
usethis::edit_r_environ()
shiny::runApp('C:/Shiny-App/shiny')
runApp('C:/Shiny-App/shiny')
library(leaflet)
library(tidycensus)
fips_codes[fips_codes$state_code == "12",]
fl <- fips_codes[fips_codes$state_code == "12",]
x <- get_acs(state = "12", county = fl$county_code,
geography = "county", variables = "B01001_001", year = 2021)
x <- get_acs(state = "12", county = fl$county_code,
geography = "county", variables = "B01001_001", year = 2020)
leaflet() %>%
addTiles() %>%
addPolygons(data = st_transform(x,4326))
x <- get_acs(state = "12", county = fl$county_code,
geography = "county", variables = "B01001_001", year = 2020,
geometry = T)
leaflet() %>%
addTiles() %>%
addPolygons(data = st_transform(x,4326))
usethis::edit_r_environ()
shiny::runApp('C:/Shiny-App/shiny')
runApp('C:/Shiny-App/shiny')
options(shiny.port = 3941)
runApp('C:/Shiny-App/shiny')
usethis::edit_r_environ()
shiny::runApp('C:/Shiny-App/shiny')
options(shiny.posrt = 3941)
options(shiny.port = 3941)
runApp('C:/Shiny-App/shiny')
rsconnect::setAccountInfo(name='prgpt2', token='006A2B6D672018962D51E710D0797444', secret='ezFuDKOncG4xofkiCyYo0URubLfnA6XLbSOD0vKr')
load("C:/Shiny-App/shiny/App2.Rdata")
usethis::edit_r_environ()
load("C:/Shiny-App/shiny/App2.Rdata")
rsconnect::setAccountInfo(name='prgpt2', token='006A2B6D672018962D51E710D0797444', secret='ezFuDKOncG4xofkiCyYo0URubLfnA6XLbSOD0vKr')
load("C:/Shiny-App/shiny/App2.Rdata")
usethis::edit_r_environ()
auth0::use_auth0()
getwd()
setwd("C:\\Users\\pgupta\\CTA")
library(tidycensus)
library(sf)
library(stringr)
library(data.table)
library(dplyr)
library(lehdr)
library(tidycensus)
library(sf)
library(stringr)
library(data.table)
library(dplyr)
library(lehdr)
#Functions to calculate census-data
#API calls
# it returns clean column names automatically
get_data <- function(table_id, geo, st = "00", co = "000",
geometry_logical = 1, y = 2020){
if(geo == "us"){
data_got <- get_acs(geography= "us", table = table_id,
year = y,geometry = geometry_logical, output = "wide")
} else if (geo == "state"){
data_got <- get_acs(geography= geo, table = table_id,
year = y, state = st, output = "wide",
geometry = geometry_logical)
} else {
#county,tract, block group
data_got <- get_acs(geography= geo, table = table_id,
year = y, state = st, county = co,
output = "wide",geometry = geometry_logical)
}
message("Got Data")
print(class(data_got))
if(table_id == "B01001"){
data_got <- calc_percentage(analyse_age(clean_col_names(data_got)), cols = 52:57 , total = 3)
} else {
data_got <- clean_col_names(data_got)
}
return(data_got)
}
#Cleaning column names
clean_col_names <- function(sf_frame, y = 2019){
acs_2019 <- load_variables(year = y, dataset = "acs5")
sf_frame_f <- sf_frame[,!grepl(colnames(sf_frame), pattern = "M$")]
logi_vector <- acs_2019$name %in% gsub(colnames(sf_frame_f)[3:ncol(sf_frame_f)],
pattern = "E$", replacement = "") # getting into final format of B01001_001 from B01001_001E
col_names_dirty <- acs_2019$label[logi_vector]
clean_names <- mgsub::mgsub(col_names_dirty,
pattern = c("Estimate!!Total:!!"," ", ":!!", "Estimate!!",":"),
replacement = c('', '_','_','',''))
print(clean_names)
colnames(sf_frame_f)[3:ncol(sf_frame_f)] <- c(clean_names, "geometry")
message("renaming")
return(sf_frame_f[!st_is_empty(sf_frame_f),])
}
###Analysing Data
#general calculations
calc_percentage <- function(data_frame, cols , total) {
y <- as.data.frame(st_drop_geometry(data_frame))
percentage_matrix <- apply(y[ , cols] , 2, function(x) {
round( x  * 100/ y [ , total] ,2)  })
colnames(percentage_matrix) <- str_c("P_" , colnames(percentage_matrix))
final_data <- cbind(data_frame, percentage_matrix)
return(final_data)
}
calc_stat <- function(census_data, col_name) {
census_data <- st_drop_geometry(census_data)
min_row <- which(census_data[, col_name] == min(census_data[, col_name]))
median_row <- which(census_data[, col_name] == median(census_data[, col_name]))
max_row <- which(census_data[, col_name] == max(census_data[, col_name]))
final_list <- data.frame( ID = c(census_data[ min_row, "GEOID"], census_data[ median_row, "GEOID"], census_data[ max_row, "GEOID"]),
Values = c(census_data[ min_row, col_name], census_data[ median_row, col_name],census_data[ max_row, col_name]))
# return(census_data[ c(min_row, median_row, max_row), c("GEOID", "Estimate_Total:") ])
}
#specific calculation
analyse_age <- function(sf_frame){
df <- setDT(st_drop_geometry(sf_frame))
y <- df[ ,`:=`(GEOID = GEOID,Total = Total, Male = Male, Female = Female,
Under_5 = Male_Under_5_years + Female_Under_5_years,
bw_5_17 = Male_5_to_9_years + Male_10_to_14_years+ Male_15_to_17_years+
Female_5_to_9_years + Female_10_to_14_years+Female_15_to_17_years,
bw_18_24 = Female_18_and_19_years + Female_20_years +Female_21_years +Female_22_to_24_years+
Male_18_and_19_years +Male_20_years+Male_21_years  + Male_22_to_24_years ,
bw_25_34 =Male_25_to_29_years+Male_30_to_34_years +
Female_25_to_29_years+Female_30_to_34_years,
bw_35_64 = Male_35_to_39_years+Male_40_to_44_years+ Male_45_to_49_years+Male_50_to_54_years+
Male_55_to_59_years+Male_60_and_61_years+Male_62_to_64_years +
Female_35_to_39_years+Female_40_to_44_years+ Female_45_to_49_years+Female_50_to_54_years+
Female_55_to_59_years+Female_60_and_61_years+Female_62_to_64_years,
bw_65_P = Female_65_and_66_years+Female_67_to_69_years+Female_70_to_74_years+
Female_75_to_79_years+Female_80_to_84_years+Female_85_years_and_over + Male_65_and_66_years+
Male_67_to_69_years+Male_70_to_74_years+Male_75_to_79_years+Male_80_to_84_years+Male_85_years_and_over
) ,]
y_geom <- st_sf(left_join(y, sf_frame[,1], by = "GEOID"))
return(y_geom)
}
analyse_minority <- function(sf_frame){
df <- setDT(st_drop_geometry(sf_frame))
df[ , Minority := (Black_or_African_American_alone +
American_Indian_and_Alaska_Native_alone +
Asian_alone + Native_Hawaiian_and_Other_Pacific_Islander_alone +
Some_other_race_alone + Two_or_more_races)
, ]
y_geom <- st_sf(left_join(df, sf_frame[,1], by = "GEOID"))
return(y_geom)
}
age <- get_data( table_id = "B01001", st = "17", co = "031",
geo = "block group")
race <- analyse_minority(get_data( table_id = "B02001", st = "17", co = "031",
geo = "block group"))
jobs <- setDT(grab_lodes(state = 'il', year = 2019, lodes_type = "wac" ))
chicago_jobs <- jobs[,county := str_sub(w_geocode,1,5), ][ county == "17031", c(1,2,6,7,30:34) ]
colnames(chicago_jobs) <- c( "GEOID", "tJobs", "L1250","Bw1250-3333", "BORAM",
"AIORANA","AA","NHOROPIA","TORMRG")
tables_acs <- load_variables(year = 2020,  dataset = "acs5")
View(tables_acs)
tables_acs <- setDT(load_variables(year = 2020,  dataset = "acs5"))
library(dplyr)
separate()
library(tidyr)
?separate
tables_acs <- tables_acs %>% separate(col = name, into = c("table_id","variable_no"), sep = "_")
?uniqueN
unique_table <- uniqueN(tables_acs, by = "table_id")
?unique
unique_table <- tables_acs[ !duplicated(table_id) , , ]
View(unique_table)
unique_table <- tables_acs[ !duplicated(table_id) , c(1,4,5), ]
View(unique_table)
